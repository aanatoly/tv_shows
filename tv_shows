#!/usr/bin/python

############################################
# Logging
############################################
import logging, sys, os
progname = os.path.basename(sys.argv[0])
def _init_log():
    name = progname
    x = logging.getLogger(name)
    x.setLevel(logging.INFO)
    # x.setLevel(logging.DEBUG)
    h = logging.StreamHandler()
    f = logging.Formatter("%(name)s (%(funcName)s:%(lineno)d) :: %(message)s")
    # f = logging.Formatter("%(message)s")
    h.setFormatter(f)
    x.addHandler(h)
    return x

x = _init_log()

############################################
# Argument parsing
############################################
import argparse
desc = '''Looks up new opisodes of tv shows'''
p = argparse.ArgumentParser(description=desc)
p.add_argument("--debug", help="debug mode", action="store_true")
p.add_argument("-n", help="movie name", dest="name", metavar='STR')
p.add_argument("-a", help="scan all shows in db", dest="all",
               action="store_true")
p.add_argument("-i", help="db info", dest="info",
               action="store_true")
p.add_argument("-s", help="search for subtitles", dest="subtitles",
               action="store_true")
p.add_argument("-b", help="open link in a browser", dest="browser",
               action="store_true")

args = p.parse_args()
if args.debug:
    x.setLevel(logging.DEBUG)

x.debug("Args: %s", args)

############################################
# Search
############################################
import subprocess as sp
from bs4 import BeautifulSoup
import re
import zlib

uagent = 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:11.0) ' + \
         'Gecko/20100101 Firefox/11.0'



def search_subtitles(args):
    '''Searches 'http://www.subtitleseeker.com' for subtitles for a given TV
    show.

    Args:
      args.name: TV show name, capitalized, with single space between words,
        eg 'Black Sails'
      args.browser (bool): if True, opens a browser with search result,
        for easy download

    Returns:
      dict: dict of subtiltes number per episode, eg
        {'s01e03' : 10, 's01e04' : 12}

    '''

    site = 'http://www.subtitleseeker.com'
    url = site + '/search/TV_EPISODES/' + args.name
    cmd = [
        'wget', '--timeout=10', '--tries=2', '--max-redirect=1',
        '-q', '-O', '-',
        '--user-agent=' + uagent,
        '--referer=' + site, url
    ]

    x.debug("cmd: %s", cmd)
    p = sp.Popen(cmd, stdout = sp.PIPE, stderr = open('/dev/null', 'w'))
    p.wait()
    html = p.stdout.read()
    return parse_subtitles(args.name, html)

ssre = None

def parse_subtitles(name, html):
    '''Parses html from 'http://www.subtitleseeker.com' and extracts subtitles
    number for each episode

    Args:
      name (str): TV show name, capitalized, with single space between words,
        eg 'Black Sails'
      html (str): html page


    Returns:
      dict: dict of subtiltes number per episode, eg
        {'s01e03' : 10, 's01e04' : 12}
    '''

    global ssre
    if not ssre:
        r = '(?i)(?P<name>.*)\s+\(\d\d\d\d\)\s+(?P<ep>S\d\dE\d\d)\s+' + \
            '(?P<sno>\d+)?\s+Sub'
        ssre = re.compile(r)

    soup = BeautifulSoup(html)
    res = {}
    for d in soup.find_all('div', attrs={'class' : 'boxRows'}):
        t = ' '.join(d.text.split())
        # x.debug("%s", t)
        m = ssre.match(t)
        x.debug("%s %s %s", m.group('name'), m.group('ep'), m.group('sno'))
        if not m:
            continue
        xname = m.group('name').title()
        xep = m.group('ep').lower()
        xsno = m.group('sno')

        if name != xname:
            continue
        if xsno == '' or xsno == '0':
            continue

        res[xep] = xsno

    x.debug("%s", pprint.pformat(res))
    return res


def search_torrents(args, old_ep = 's00e00'):
    '''Searches torrent site 'http://kickass.to' for new episodes of a given TV
       show.  An episode is considered new if it newer then `old_ep`.

    Args:
      args.name: TV show name, capitalized, with single space between words,
        eg 'Black Sails'
      args.browser (bool): if True, opens a browser with search result,
        for easy download
      args.subtitles (bool): if True, search for subtitles
      old_ep (str): old episode name, formated as sNNeNN

    Returns:
      list: list of new episodes, eg ['s01e03, 's01e04']. If `args.subtitles`
        is True, number of subtitles is appended to an episode,
        eg ['s01e03+20, 's01e04+2']
    '''

    assert args.name

    site = 'http://kickass.to'
    url = site + '/usearch/' + args.name.replace(' ', '%20') + \
           '%20category%3Atv/?field=time_add&sorder=desc'
    cmd = [
        'wget', '--timeout=10', '--tries=2', '--max-redirect=1',
        '-q', '-O', '-',
        '--user-agent=' + uagent,
        '--referer=' + site, url
    ]

    x.debug("cmd: %s", cmd)
    p = sp.Popen(cmd, stdout = sp.PIPE, stderr = open('/dev/null', 'w'))
    p.wait()
    html = p.stdout.read()
    try:
        d = zlib.decompressobj(16+zlib.MAX_WBITS)
        html = d.decompress(html)
    except:
        pass
    eps = parse_torrents(args.name, html, old_ep)
    if not eps:
        return []
    if args.browser:
        sp.Popen([xconf['browser'], url], stderr = open('/dev/null', 'r'))

    if args.subtitles:
        res = search_subtitles(args)
        for i in range(len(eps)):
            if eps[i] in res:
                eps[i] += ' + ' + res[eps[i]]
    return eps

tvre = None

def parse_torrents(name, html, old_ep):
    '''Parses html from 'http://kickass.to' and extracts new episodes of a
       given TV show

    Args:
      name (str): TV show name, capitalized, with single space between words,
        eg 'Black Sails'
      html (str): html page
      old_ep (str): old episode name, formated as sNNeNN

    Returns:
      list: sorted list of new episodes, eg ['s01e03, 's01e04'].
    '''
    global tvre
    if not tvre:
        tvre = '(?i)(?P<name>.*)\s+(?P<ep>S\d\dE\d\d)'
        tvre = re.compile(tvre)

    eps = []
    soup = BeautifulSoup(html)
    for d in soup.find_all('div', attrs={'class' : 'torrentname'}):
        t = ' '.join(d.text.split())
        x.debug("%s", t)
        # continue
        m = tvre.match(t)
        if m:
            xname = m.group('name').strip().title()
            xep = m.group('ep').strip().lower()
            x.debug('%s vs %s %s', name, xname, xep)
            if name != xname:
                continue
            if xep in eps:
                continue
            if xep > old_ep:
                eps.append(xep)
    return sorted(eps)



def update_tvs_from_dl(tvs):
    files = []
    torrent_dir = os.path.expanduser(xconf['torrent_dir'])
    for (dirpath, dirnames, filenames) in os.walk(torrent_dir):
        files.extend(filenames)
        files.extend(dirnames)
    files = [ ' '.join(f.replace('.', ' ').split()) for f in files ]

    for tv in tvs:
        rtv = '(?i)' + tv + '.*(S\d\dE\d\d).*'
        for f in files:
            m = re.search(rtv, f)
            if not m:
                continue
            ep_last = m.group(1).lower()
            if ep_last > tvs[tv]:
                x.debug('update %s to %s', tv, ep_last)
                tvs[tv] = ep_last



############################################
# Config
############################################
config_file = '~/.tv_shows'
config_file_real = os.path.expanduser(config_file)

default_xconf = {
    'browser' : 'firefox-bin',
    'torrent_dir' : '~/Downloads/torrents',
    'tvs' : {
        'Black Sails': 's01e05',
        'Elementary': 's02e15',
    }
}

def config_read():
    try:
        text = open(config_file_real, 'r').read()
    except:
        config_write_default("does not exists")
        exit(1)

    try:
        xconf = eval(text)
        k1 = sorted(xconf.keys())
        k2 = sorted(default_xconf.keys())
        if k1 != k2:
            raise Exception("wrong format")
    except:
        config_write_default("has wrong format")
        exit(1)

    return xconf

def config_write(xconf):
    open(config_file_real, 'w').write(pprint.pformat(xconf, width=20) + '\n')

def config_write_default(msg):
    print "Config file", config_file, msg
    print "New one was created, please edit it and run script again"
    config_write(default_xconf)

############################################
# Main
############################################
import pprint

if args.name:
    args.name = args.name.strip().title()
    eps = search_torrents(args)
    print "New episodes:", ', '.join(eps)
    exit(0)

xconf = config_read()

if args.info:
    print config_file
    print pprint.pformat(xconf)
    exit(0)



update_tvs_from_dl(xconf['tvs'])
config_write(xconf)
tvs = xconf['tvs']

if args.all:
    nlen = max([len(k) for k in tvs.keys()])
    fmt = '%-' + str(nlen) + 's  %-6s  %s'
    n = 'New'
    if args.subtitles:
        n += ' #subs'
    msg = fmt % ('TV', 'DL', n)
    print msg

    for tv in sorted(tvs.keys()):
        args.name = tv
        eps = search_torrents(args, tvs[tv])
        eps = ', '.join(eps)
        print fmt % (tv.title(), tvs[tv], eps)



